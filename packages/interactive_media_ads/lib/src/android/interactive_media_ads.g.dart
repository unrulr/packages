// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v19.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart'
    show ReadBuffer, WriteBuffer, immutable, protected;
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart' show WidgetsFlutterBinding;

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse(
    {Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

/// An immutable object that serves as the base class for all ProxyApis and
/// can provide functional copies of itself.
///
/// All implementers are expected to be [immutable] as defined by the annotation
/// and override [pigeon_copy] returning an instance of itself.
@immutable
abstract class PigeonProxyApiBaseClass {
  /// Construct a [PigeonProxyApiBaseClass].
  PigeonProxyApiBaseClass({
    this.pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
  }) : pigeon_instanceManager =
            pigeon_instanceManager ?? PigeonInstanceManager.instance;

  /// Sends and receives binary data across the Flutter platform barrier.
  ///
  /// If it is null, the default BinaryMessenger will be used, which routes to
  /// the host platform.
  @protected
  final BinaryMessenger? pigeon_binaryMessenger;

  /// Maintains instances stored to communicate with native language objects.
  @protected
  final PigeonInstanceManager pigeon_instanceManager;

  /// Instantiates and returns a functionally identical object to oneself.
  ///
  /// Outside of tests, this method should only ever be called by
  /// [PigeonInstanceManager].
  ///
  /// Subclasses should always override their parent's implementation of this
  /// method.
  @protected
  PigeonProxyApiBaseClass pigeon_copy();
}

/// Maintains instances used to communicate with the native objects they
/// represent.
///
/// Added instances are stored as weak references and their copies are stored
/// as strong references to maintain access to their variables and callback
/// methods. Both are stored with the same identifier.
///
/// When a weak referenced instance becomes inaccessible,
/// [onWeakReferenceRemoved] is called with its associated identifier.
///
/// If an instance is retrieved and has the possibility to be used,
/// (e.g. calling [getInstanceWithWeakReference]) a copy of the strong reference
/// is added as a weak reference with the same identifier. This prevents a
/// scenario where the weak referenced instance was released and then later
/// returned by the host platform.
class PigeonInstanceManager {
  /// Constructs a [PigeonInstanceManager].
  PigeonInstanceManager({required void Function(int) onWeakReferenceRemoved}) {
    this.onWeakReferenceRemoved = (int identifier) {
      _weakInstances.remove(identifier);
      onWeakReferenceRemoved(identifier);
    };
    _finalizer = Finalizer<int>(this.onWeakReferenceRemoved);
  }

  // Identifiers are locked to a specific range to avoid collisions with objects
  // created simultaneously by the host platform.
  // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
  // 0 <= n < 2^16.
  static const int _maxDartCreatedIdentifier = 65536;

  /// The default [PigeonInstanceManager] used by ProxyApis.
  ///
  /// On creation, this manager makes a call to clear the native
  /// InstanceManager. This is to prevent identifier conflicts after a host
  /// restart.
  static final PigeonInstanceManager instance = _initInstance();

  // Expando is used because it doesn't prevent its keys from becoming
  // inaccessible. This allows the manager to efficiently retrieve an identifier
  // of an instance without holding a strong reference to that instance.
  //
  // It also doesn't use `==` to search for identifiers, which would lead to an
  // infinite loop when comparing an object to its copy. (i.e. which was caused
  // by calling instanceManager.getIdentifier() inside of `==` while this was a
  // HashMap).
  final Expando<int> _identifiers = Expando<int>();
  final Map<int, WeakReference<PigeonProxyApiBaseClass>> _weakInstances =
      <int, WeakReference<PigeonProxyApiBaseClass>>{};
  final Map<int, PigeonProxyApiBaseClass> _strongInstances =
      <int, PigeonProxyApiBaseClass>{};
  late final Finalizer<int> _finalizer;
  int _nextIdentifier = 0;

  /// Called when a weak referenced instance is removed by [removeWeakReference]
  /// or becomes inaccessible.
  late final void Function(int) onWeakReferenceRemoved;

  static PigeonInstanceManager _initInstance() {
    WidgetsFlutterBinding.ensureInitialized();
    final _PigeonInstanceManagerApi api = _PigeonInstanceManagerApi();
    // Clears the native `PigeonInstanceManager` on the initial use of the Dart one.
    api.clear();
    final PigeonInstanceManager instanceManager = PigeonInstanceManager(
      onWeakReferenceRemoved: (int identifier) {
        api.removeStrongReference(identifier);
      },
    );
    _PigeonInstanceManagerApi.setUpMessageHandlers(
        instanceManager: instanceManager);
    BaseDisplayContainer.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdDisplayContainer.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdsLoader.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdsManagerLoadedEvent.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdErrorEvent.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdError.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdsRequest.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    ContentProgressProvider.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdsManager.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    BaseManager.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdEvent.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    ImaSdkFactory.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    ImaSdkSettings.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    VideoProgressUpdate.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdMediaInfo.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdPodInfo.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    FrameLayout.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    ViewGroup.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    VideoView.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    View.pigeon_setUpMessageHandlers(pigeon_instanceManager: instanceManager);
    MediaPlayer.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    VideoAdPlayerCallback.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    VideoAdPlayer.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdsLoadedListener.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdErrorListener.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    AdEventListener.pigeon_setUpMessageHandlers(
        pigeon_instanceManager: instanceManager);
    return instanceManager;
  }

  /// Adds a new instance that was instantiated by Dart.
  ///
  /// In other words, Dart wants to add a new instance that will represent
  /// an object that will be instantiated on the host platform.
  ///
  /// Throws assertion error if the instance has already been added.
  ///
  /// Returns the randomly generated id of the [instance] added.
  int addDartCreatedInstance(PigeonProxyApiBaseClass instance) {
    final int identifier = _nextUniqueIdentifier();
    _addInstanceWithIdentifier(instance, identifier);
    return identifier;
  }

  /// Removes the instance, if present, and call [onWeakReferenceRemoved] with
  /// its identifier.
  ///
  /// Returns the identifier associated with the removed instance. Otherwise,
  /// `null` if the instance was not found in this manager.
  ///
  /// This does not remove the strong referenced instance associated with
  /// [instance]. This can be done with [remove].
  int? removeWeakReference(PigeonProxyApiBaseClass instance) {
    final int? identifier = getIdentifier(instance);
    if (identifier == null) {
      return null;
    }

    _identifiers[instance] = null;
    _finalizer.detach(instance);
    onWeakReferenceRemoved(identifier);

    return identifier;
  }

  /// Removes [identifier] and its associated strongly referenced instance, if
  /// present, from the manager.
  ///
  /// Returns the strong referenced instance associated with [identifier] before
  /// it was removed. Returns `null` if [identifier] was not associated with
  /// any strong reference.
  ///
  /// This does not remove the weak referenced instance associated with
  /// [identifier]. This can be done with [removeWeakReference].
  T? remove<T extends PigeonProxyApiBaseClass>(int identifier) {
    return _strongInstances.remove(identifier) as T?;
  }

  /// Retrieves the instance associated with identifier.
  ///
  /// The value returned is chosen from the following order:
  ///
  /// 1. A weakly referenced instance associated with identifier.
  /// 2. If the only instance associated with identifier is a strongly
  /// referenced instance, a copy of the instance is added as a weak reference
  /// with the same identifier. Returning the newly created copy.
  /// 3. If no instance is associated with identifier, returns null.
  ///
  /// This method also expects the host `InstanceManager` to have a strong
  /// reference to the instance the identifier is associated with.
  T? getInstanceWithWeakReference<T extends PigeonProxyApiBaseClass>(
      int identifier) {
    final PigeonProxyApiBaseClass? weakInstance =
        _weakInstances[identifier]?.target;

    if (weakInstance == null) {
      final PigeonProxyApiBaseClass? strongInstance =
          _strongInstances[identifier];
      if (strongInstance != null) {
        final PigeonProxyApiBaseClass copy = strongInstance.pigeon_copy();
        _identifiers[copy] = identifier;
        _weakInstances[identifier] =
            WeakReference<PigeonProxyApiBaseClass>(copy);
        _finalizer.attach(copy, identifier, detach: copy);
        return copy as T;
      }
      return strongInstance as T?;
    }

    return weakInstance as T;
  }

  /// Retrieves the identifier associated with instance.
  int? getIdentifier(PigeonProxyApiBaseClass instance) {
    return _identifiers[instance];
  }

  /// Adds a new instance that was instantiated by the host platform.
  ///
  /// In other words, the host platform wants to add a new instance that
  /// represents an object on the host platform. Stored with [identifier].
  ///
  /// Throws assertion error if the instance or its identifier has already been
  /// added.
  ///
  /// Returns unique identifier of the [instance] added.
  void addHostCreatedInstance(
      PigeonProxyApiBaseClass instance, int identifier) {
    _addInstanceWithIdentifier(instance, identifier);
  }

  void _addInstanceWithIdentifier(
      PigeonProxyApiBaseClass instance, int identifier) {
    assert(!containsIdentifier(identifier));
    assert(getIdentifier(instance) == null);
    assert(identifier >= 0);

    _identifiers[instance] = identifier;
    _weakInstances[identifier] =
        WeakReference<PigeonProxyApiBaseClass>(instance);
    _finalizer.attach(instance, identifier, detach: instance);

    final PigeonProxyApiBaseClass copy = instance.pigeon_copy();
    _identifiers[copy] = identifier;
    _strongInstances[identifier] = copy;
  }

  /// Whether this manager contains the given [identifier].
  bool containsIdentifier(int identifier) {
    return _weakInstances.containsKey(identifier) ||
        _strongInstances.containsKey(identifier);
  }

  int _nextUniqueIdentifier() {
    late int identifier;
    do {
      identifier = _nextIdentifier;
      _nextIdentifier = (_nextIdentifier + 1) % _maxDartCreatedIdentifier;
    } while (containsIdentifier(identifier));
    return identifier;
  }
}

/// Generated API for managing the Dart and native `PigeonInstanceManager`s.
class _PigeonInstanceManagerApi {
  /// Constructor for [_PigeonInstanceManagerApi].
  _PigeonInstanceManagerApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;

  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec =
      StandardMessageCodec();

  static void setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? binaryMessenger,
    PigeonInstanceManager? instanceManager,
  }) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.removeStrongReference',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.removeStrongReference was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_identifier = (args[0] as int?);
          assert(arg_identifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.removeStrongReference was null, expected non-null int.');
          try {
            (instanceManager ?? PigeonInstanceManager.instance)
                .remove(arg_identifier!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  Future<void> removeStrongReference(int identifier) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.removeStrongReference';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[identifier]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Clear the native `PigeonInstanceManager`.
  ///
  /// This is typically called after a hot restart.
  Future<void> clear() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.PigeonInstanceManagerApi.clear';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _PigeonProxyApiBaseCodec extends StandardMessageCodec {
  const _PigeonProxyApiBaseCodec(this.instanceManager);
  final PigeonInstanceManager instanceManager;
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonProxyApiBaseClass) {
      buffer.putUint8(128);
      writeValue(buffer, instanceManager.getIdentifier(value));
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return instanceManager
            .getInstanceWithWeakReference(readValue(buffer)! as int);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// The types of error that can be encountered.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.AdErrorCode.html.
enum AdErrorCode {
  /// Ads player was not provided.
  adsPlayerWasNotProvided,

  /// There was a problem requesting ads from the server.
  adsRequestNetworkError,

  /// A companion ad failed to load or render.
  companionAdLoadingFailed,

  /// There was a problem requesting ads from the server.
  failedToRequestAds,

  /// An error internal to the SDK occurred.
  internalError,

  /// Invalid arguments were provided to SDK methods.
  invalidArguments,

  /// An overlay ad failed to load.
  overlayAdLoadingFailed,

  /// An overlay ad failed to render.
  overlayAdPlayingFailed,

  /// Ads list was returned but ContentProgressProvider was not configured.
  playlistNoContentTracking,

  /// Ads loader sent ads loaded event when it was not expected.
  unexpectedAdsLoadedEvent,

  /// The ad response was not understood and cannot be parsed.
  unknownAdResponse,

  /// An unexpected error occurred and the cause is not known.
  unknownError,

  /// No assets were found in the VAST ad response.
  vastAssetNotFound,

  /// A VAST response containing a single `<VAST>` tag with no child tags.
  vastEmptyResponse,

  /// Assets were found in the VAST ad response for a linear ad, but none of
  /// them matched the video player's capabilities.
  vastLinearAssetMismatch,

  /// At least one VAST wrapper ad loaded successfully and a subsequent wrapper
  /// or inline ad load has timed out.
  vastLoadTimeout,

  /// The ad response was not recognized as a valid VAST ad.
  vastMalformedResponse,

  /// Failed to load media assets from a VAST response.
  vastMediaLoadTimeout,

  /// Assets were found in the VAST ad response for a nonlinear ad, but none of
  /// them matched the video player's capabilities.
  vastNonlinearAssetMismatch,

  /// No Ads VAST response after one or more wrappers.
  vastNoAdsAfterWrapper,

  /// The maximum number of VAST wrapper redirects has been reached.
  vastTooManyRedirects,

  /// Trafficking error.
  ///
  /// Video player received an ad type that it was not expecting and/or cannot
  /// display.
  vastTraffickingError,

  /// There was an error playing the video ad.
  videoPlayError,

  /// The error code is not recognized by this wrapper.
  unknown,
}

/// Specifies when the error was encountered, during either ad loading or playback.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.AdErrorType.html.
enum AdErrorType {
  /// Indicates that the error was encountered when the ad was being loaded.
  load,

  /// Indicates that the error was encountered after the ad loaded, during ad play.
  play,

  /// The error is not recognized by this wrapper.
  unknown,
}

/// Types of events that can occur during ad playback.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.AdEventType.html.
enum AdEventType {
  /// Fired when an ad break in a stream ends.
  adBreakEnded,

  /// Fired when an ad break will not play back any ads.
  adBreakFetchError,

  /// Fired when an ad break is ready from VMAP or ad rule ads.
  adBreakReady,

  /// Fired when an ad break in a stream starts.
  adBreakStarted,

  /// Fired when playback stalls while the ad buffers.
  adBuffering,

  /// Fired when an ad period in a stream ends.
  adPeriodEnded,

  /// Fired when an ad period in a stream starts.
  adPeriodStarted,

  /// Fired to inform of ad progress and can be used by publisher to display a
  /// countdown timer.
  adProgress,

  /// Fired when the ads manager is done playing all the valid ads in the ads
  /// response, or when the response doesn't return any valid ads.
  allAdsCompleted,

  /// Fired when an ad is clicked.
  clicked,

  /// Fired when an ad completes playing.
  completed,

  /// Fired when content should be paused.
  contentPauseRequested,

  /// Fired when content should be resumed.
  contentResumeRequested,

  /// Fired when VOD stream cuepoints have changed.
  cuepointsChanged,

  /// Fired when the ad playhead crosses first quartile.
  firstQuartile,

  /// The user has closed the icon fallback image dialog.
  iconFallbackImageClosed,

  /// The user has tapped an ad icon.
  iconTapped,

  /// Fired when the VAST response has been received.
  loaded,

  /// Fired to enable the SDK to communicate a message to be logged, which is
  /// stored in adData.
  log,

  /// Fired when the ad playhead crosses midpoint.
  midpoint,

  /// Fired when an ad is paused.
  paused,

  /// Fired when an ad is resumed.
  resumed,

  /// Fired when an ad changes its skippable state.
  skippableStateChanged,

  /// Fired when an ad was skipped.
  skipped,

  /// Fired when an ad starts playing.
  started,

  /// Fired when a non-clickthrough portion of a video ad is clicked.
  tapped,

  /// Fired when the ad playhead crosses third quartile.
  thirdQuartile,

  /// The event type is not recognized by this wrapper.
  unknown,
}

/// A base class for more specialized container interfaces.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/BaseDisplayContainer.html.
class BaseDisplayContainer extends PigeonProxyApiBaseClass {
  /// Constructs [BaseDisplayContainer] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  BaseDisplayContainer.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    BaseDisplayContainer Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  BaseDisplayContainer.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  BaseDisplayContainer pigeon_copy() {
    return BaseDisplayContainer.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// A container in which to display the ads.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdDisplayContainer.
class AdDisplayContainer extends PigeonProxyApiBaseClass
    implements BaseDisplayContainer {
  /// Constructs [AdDisplayContainer] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdDisplayContainer.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    AdDisplayContainer Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdDisplayContainer.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdDisplayContainer.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdDisplayContainer.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  AdDisplayContainer.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  AdDisplayContainer pigeon_copy() {
    return AdDisplayContainer.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// An object which allows publishers to request ads from ad servers or a
/// dynamic ad insertion stream.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsLoader.
class AdsLoader extends PigeonProxyApiBaseClass {
  /// Constructs [AdsLoader] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdsLoader.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  late final _PigeonProxyApiBaseCodec __pigeon_codecAdsLoader =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    AdsLoader Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdsLoader.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsLoader.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsLoader.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  AdsLoader.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  /// Registers a listener for errors that occur during the ads request.
  Future<void> addAdErrorListener(AdErrorListener listener) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec = __pigeon_codecAdsLoader;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.AdsLoader.addAdErrorListener';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, listener]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Registers a listener for the ads manager loaded event.
  Future<void> addAdsLoadedListener(AdsLoadedListener listener) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec = __pigeon_codecAdsLoader;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.AdsLoader.addAdsLoadedListener';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, listener]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Requests ads from a server.
  Future<void> requestAds(AdsRequest request) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec = __pigeon_codecAdsLoader;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.AdsLoader.requestAds';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this, request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  AdsLoader pigeon_copy() {
    return AdsLoader.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// An event raised when ads are successfully loaded from the ad server through an AdsLoader.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsManagerLoadedEvent.html.
class AdsManagerLoadedEvent extends PigeonProxyApiBaseClass {
  /// Constructs [AdsManagerLoadedEvent] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdsManagerLoadedEvent.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.manager,
  });

  /// The ads manager that will control playback of the loaded ads, or null when
  /// using dynamic ad insertion.
  final AdsManager manager;

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    AdsManagerLoadedEvent Function(AdsManager manager)? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdsManagerLoadedEvent.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsManagerLoadedEvent.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsManagerLoadedEvent.pigeon_newInstance was null, expected non-null int.');
          final AdsManager? arg_manager = (args[1] as AdsManager?);
          assert(arg_manager != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsManagerLoadedEvent.pigeon_newInstance was null, expected non-null AdsManager.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call(arg_manager!) ??
                  AdsManagerLoadedEvent.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                    manager: arg_manager!,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  AdsManagerLoadedEvent pigeon_copy() {
    return AdsManagerLoadedEvent.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      manager: manager,
    );
  }
}

/// An event raised when there is an error loading or playing ads.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdErrorEvent.html.
class AdErrorEvent extends PigeonProxyApiBaseClass {
  /// Constructs [AdErrorEvent] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdErrorEvent.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.error,
  });

  /// The AdError that caused this event.
  final AdError error;

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    AdErrorEvent Function(AdError error)? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdErrorEvent.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdErrorEvent.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdErrorEvent.pigeon_newInstance was null, expected non-null int.');
          final AdError? arg_error = (args[1] as AdError?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdErrorEvent.pigeon_newInstance was null, expected non-null AdError.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call(arg_error!) ??
                  AdErrorEvent.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                    error: arg_error!,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  AdErrorEvent pigeon_copy() {
    return AdErrorEvent.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      error: error,
    );
  }
}

/// An error that occurred in the SDK.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.html.
class AdError extends PigeonProxyApiBaseClass {
  /// Constructs [AdError] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdError.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.errorCode,
    required this.errorCodeNumber,
    required this.errorType,
    required this.message,
  });

  /// The error's code.
  final AdErrorCode errorCode;

  /// The error code's number.
  final int errorCodeNumber;

  /// The error's type.
  final AdErrorType errorType;

  /// A human-readable summary of the error.
  final String message;

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    AdError Function(
      AdErrorCode errorCode,
      int errorCodeNumber,
      AdErrorType errorType,
      String message,
    )? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdError.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdError.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdError.pigeon_newInstance was null, expected non-null int.');
          final AdErrorCode? arg_errorCode =
              args[1] == null ? null : AdErrorCode.values[args[1]! as int];
          assert(arg_errorCode != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdError.pigeon_newInstance was null, expected non-null AdErrorCode.');
          final int? arg_errorCodeNumber = (args[2] as int?);
          assert(arg_errorCodeNumber != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdError.pigeon_newInstance was null, expected non-null int.');
          final AdErrorType? arg_errorType =
              args[3] == null ? null : AdErrorType.values[args[3]! as int];
          assert(arg_errorType != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdError.pigeon_newInstance was null, expected non-null AdErrorType.');
          final String? arg_message = (args[4] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdError.pigeon_newInstance was null, expected non-null String.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call(arg_errorCode!, arg_errorCodeNumber!,
                      arg_errorType!, arg_message!) ??
                  AdError.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                    errorCode: arg_errorCode!,
                    errorCodeNumber: arg_errorCodeNumber!,
                    errorType: arg_errorType!,
                    message: arg_message!,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  AdError pigeon_copy() {
    return AdError.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      errorCode: errorCode,
      errorCodeNumber: errorCodeNumber,
      errorType: errorType,
      message: message,
    );
  }
}

/// An object containing the data used to request ads from the server.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsRequest.
class AdsRequest extends PigeonProxyApiBaseClass {
  /// Constructs [AdsRequest] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdsRequest.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  late final _PigeonProxyApiBaseCodec __pigeon_codecAdsRequest =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    AdsRequest Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdsRequest.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsRequest.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsRequest.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  AdsRequest.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  /// Sets the URL from which ads will be requested.
  Future<void> setAdTagUrl(String adTagUrl) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecAdsRequest;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.AdsRequest.setAdTagUrl';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, adTagUrl]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Attaches a ContentProgressProvider instance to allow scheduling ad breaks
  /// based on content progress (cue points).
  Future<void> setContentProgressProvider(
      ContentProgressProvider provider) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecAdsRequest;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.AdsRequest.setContentProgressProvider';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, provider]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  AdsRequest pigeon_copy() {
    return AdsRequest.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// Defines an interface to allow SDK to track progress of the content video.
///
/// See https://developers.google.com/ad-manager/dynamic-ad-insertion/sdk/android/api/reference/com/google/ads/interactivemedia/v3/api/player/ContentProgressProvider.html.
class ContentProgressProvider extends PigeonProxyApiBaseClass {
  /// Constructs [ContentProgressProvider] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  ContentProgressProvider.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    ContentProgressProvider Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.ContentProgressProvider.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.ContentProgressProvider.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.ContentProgressProvider.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  ContentProgressProvider.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  ContentProgressProvider pigeon_copy() {
    return ContentProgressProvider.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// An object which handles playing ads after they've been received from the
/// server.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsManager.
class AdsManager extends BaseManager {
  /// Constructs [AdsManager] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdsManager.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  }) : super.pigeon_detached();

  late final _PigeonProxyApiBaseCodec __pigeon_codecAdsManager =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    AdsManager Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdsManager.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsManager.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsManager.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  AdsManager.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  /// Discards current ad break and resumes content.
  Future<void> discardAdBreak() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecAdsManager;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.AdsManager.discardAdBreak';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Pauses the current ad.
  Future<void> pause() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecAdsManager;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.AdsManager.pause';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Starts playing the ads.
  Future<void> start() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecAdsManager;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.AdsManager.start';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  AdsManager pigeon_copy() {
    return AdsManager.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// Base interface for managing ads..
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/BaseManager.html.
class BaseManager extends PigeonProxyApiBaseClass {
  /// Constructs [BaseManager] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  BaseManager.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  late final _PigeonProxyApiBaseCodec __pigeon_codecBaseManager =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    BaseManager Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.BaseManager.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.BaseManager.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.BaseManager.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  BaseManager.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  /// Registers a listener for errors that occur during the ad or stream
  /// initialization and playback.
  Future<void> addAdErrorListener(AdErrorListener errorListener) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecBaseManager;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.BaseManager.addAdErrorListener';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, errorListener]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Registers a listener for ad events that occur during ad or stream
  /// initialization and playback.
  Future<void> addAdEventListener(AdEventListener adEventListener) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecBaseManager;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.BaseManager.addAdEventListener';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, adEventListener]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Stops the ad and all tracking, then releases all assets that were loaded
  /// to play the ad.
  Future<void> destroy() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecBaseManager;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.BaseManager.destroy';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Initializes the ad experience using default rendering settings
  Future<void> init() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecBaseManager;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.BaseManager.init';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  BaseManager pigeon_copy() {
    return BaseManager.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// Event to notify publisher that an event occurred with an Ad.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.html.
class AdEvent extends PigeonProxyApiBaseClass {
  /// Constructs [AdEvent] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdEvent.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.type,
  });

  /// The type of event that occurred.
  final AdEventType type;

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    AdEvent Function(AdEventType type)? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdEvent.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdEvent.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdEvent.pigeon_newInstance was null, expected non-null int.');
          final AdEventType? arg_type =
              args[1] == null ? null : AdEventType.values[args[1]! as int];
          assert(arg_type != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdEvent.pigeon_newInstance was null, expected non-null AdEventType.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call(arg_type!) ??
                  AdEvent.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                    type: arg_type!,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  AdEvent pigeon_copy() {
    return AdEvent.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      type: type,
    );
  }
}

/// Factory class for creating SDK objects.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/ImaSdkFactory.
class ImaSdkFactory extends PigeonProxyApiBaseClass {
  /// Constructs [ImaSdkFactory] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  ImaSdkFactory.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  late final _PigeonProxyApiBaseCodec __pigeon_codecImaSdkFactory =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  static final ImaSdkFactory instance = __pigeon_instance();

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    ImaSdkFactory Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  ImaSdkFactory.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  static ImaSdkFactory __pigeon_instance() {
    final ImaSdkFactory __pigeon_instance = ImaSdkFactory.pigeon_detached();
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(PigeonInstanceManager.instance);
    final BinaryMessenger __pigeon_binaryMessenger =
        ServicesBinding.instance.defaultBinaryMessenger;
    final int __pigeon_instanceIdentifier = PigeonInstanceManager.instance
        .addDartCreatedInstance(__pigeon_instance);
    () async {
      const String __pigeon_channelName =
          'dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.instance';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: __pigeon_binaryMessenger,
      );
      final List<Object?>? __pigeon_replyList = await __pigeon_channel
          .send(<Object?>[__pigeon_instanceIdentifier]) as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: __pigeon_replyList[0]! as String,
          message: __pigeon_replyList[1] as String?,
          details: __pigeon_replyList[2],
        );
      } else {
        return;
      }
    }();
    return __pigeon_instance;
  }

  static Future<AdDisplayContainer> createAdDisplayContainer(
    ViewGroup container,
    VideoAdPlayer player, {
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
  }) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdDisplayContainer';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[container, player]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AdDisplayContainer?)!;
    }
  }

  /// Creates an `ImaSdkSettings` object for configuring the IMA SDK.
  Future<ImaSdkSettings> createImaSdkSettings() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecImaSdkFactory;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createImaSdkSettings';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as ImaSdkSettings?)!;
    }
  }

  /// Creates an `AdsLoader` for requesting ads using the specified settings
  /// object.
  Future<AdsLoader> createAdsLoader(
    ImaSdkSettings settings,
    AdDisplayContainer container,
  ) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecImaSdkFactory;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdsLoader';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, settings, container]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AdsLoader?)!;
    }
  }

  /// Creates an AdsRequest object to contain the data used to request ads.
  Future<AdsRequest> createAdsRequest() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecImaSdkFactory;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdsRequest';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AdsRequest?)!;
    }
  }

  @override
  ImaSdkFactory pigeon_copy() {
    return ImaSdkFactory.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// Defines general SDK settings that are used when creating an `AdsLoader`.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/ImaSdkSettings.html.
class ImaSdkSettings extends PigeonProxyApiBaseClass {
  /// Constructs [ImaSdkSettings] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  ImaSdkSettings.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    ImaSdkSettings Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  ImaSdkSettings.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  ImaSdkSettings pigeon_copy() {
    return ImaSdkSettings.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// Defines an update to the video's progress.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoProgressUpdate.html.
class VideoProgressUpdate extends PigeonProxyApiBaseClass {
  VideoProgressUpdate({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required int currentTimeMs,
    required int durationMs,
  }) {
    final int __pigeon_instanceIdentifier =
        pigeon_instanceManager.addDartCreatedInstance(this);
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoProgressUpdate;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    () async {
      const String __pigeon_channelName =
          'dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_defaultConstructor';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: __pigeon_binaryMessenger,
      );
      final List<Object?>? __pigeon_replyList = await __pigeon_channel.send(
              <Object?>[__pigeon_instanceIdentifier, currentTimeMs, durationMs])
          as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: __pigeon_replyList[0]! as String,
          message: __pigeon_replyList[1] as String?,
          details: __pigeon_replyList[2],
        );
      } else {
        return;
      }
    }();
  }

  /// Constructs [VideoProgressUpdate] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  VideoProgressUpdate.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  late final _PigeonProxyApiBaseCodec __pigeon_codecVideoProgressUpdate =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  /// Value to use for cases when progress is not yet defined, such as video
  /// initialization.
  static final VideoProgressUpdate videoTimeNotReady =
      __pigeon_videoTimeNotReady();

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    VideoProgressUpdate Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  VideoProgressUpdate.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  static VideoProgressUpdate __pigeon_videoTimeNotReady() {
    final VideoProgressUpdate __pigeon_instance =
        VideoProgressUpdate.pigeon_detached();
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(PigeonInstanceManager.instance);
    final BinaryMessenger __pigeon_binaryMessenger =
        ServicesBinding.instance.defaultBinaryMessenger;
    final int __pigeon_instanceIdentifier = PigeonInstanceManager.instance
        .addDartCreatedInstance(__pigeon_instance);
    () async {
      const String __pigeon_channelName =
          'dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.videoTimeNotReady';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: __pigeon_binaryMessenger,
      );
      final List<Object?>? __pigeon_replyList = await __pigeon_channel
          .send(<Object?>[__pigeon_instanceIdentifier]) as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: __pigeon_replyList[0]! as String,
          message: __pigeon_replyList[1] as String?,
          details: __pigeon_replyList[2],
        );
      } else {
        return;
      }
    }();
    return __pigeon_instance;
  }

  @override
  VideoProgressUpdate pigeon_copy() {
    return VideoProgressUpdate.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// The minimal information required to play an ad.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/AdMediaInfo.html.
class AdMediaInfo extends PigeonProxyApiBaseClass {
  /// Constructs [AdMediaInfo] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdMediaInfo.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.url,
  });

  final String url;

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    AdMediaInfo Function(String url)? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdMediaInfo.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdMediaInfo.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdMediaInfo.pigeon_newInstance was null, expected non-null int.');
          final String? arg_url = (args[1] as String?);
          assert(arg_url != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdMediaInfo.pigeon_newInstance was null, expected non-null String.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call(arg_url!) ??
                  AdMediaInfo.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                    url: arg_url!,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  AdMediaInfo pigeon_copy() {
    return AdMediaInfo.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      url: url,
    );
  }
}

/// An ad may be part of a pod of ads.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdPodInfo.html.
class AdPodInfo extends PigeonProxyApiBaseClass {
  /// Constructs [AdPodInfo] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdPodInfo.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.adPosition,
    required this.maxDuration,
    required this.podIndex,
    required this.timeOffset,
    required this.totalAds,
    required this.isBumper,
  });

  /// The position of the ad within the pod.
  ///
  /// The value returned is one-based, for example, 1 of 2, 2 of 2, etc. If the
  /// ad is not part of a pod, this will return 1.
  final int adPosition;

  /// The maximum duration of the pod in seconds.
  ///
  /// For unknown duration, -1 is returned.
  final double maxDuration;

  /// Client side and DAI VOD: Returns the index of the ad pod.
  final int podIndex;

  /// The content time offset at which the current ad pod was scheduled.
  ///
  /// For preroll pod, 0 is returned. For midrolls, the scheduled time is
  /// returned in seconds. For postroll, -1 is returned. Defaults to 0 if this
  /// ad is not part of a pod, or the pod is not part of an ad playlist.
  final double timeOffset;

  /// The total number of ads contained within this pod, including bumpers.
  final int totalAds;

  /// Returns true if the ad is a bumper ad.
  final bool isBumper;

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    AdPodInfo Function(
      int adPosition,
      double maxDuration,
      int podIndex,
      double timeOffset,
      int totalAds,
      bool isBumper,
    )? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance was null, expected non-null int.');
          final int? arg_adPosition = (args[1] as int?);
          assert(arg_adPosition != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance was null, expected non-null int.');
          final double? arg_maxDuration = (args[2] as double?);
          assert(arg_maxDuration != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance was null, expected non-null double.');
          final int? arg_podIndex = (args[3] as int?);
          assert(arg_podIndex != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance was null, expected non-null int.');
          final double? arg_timeOffset = (args[4] as double?);
          assert(arg_timeOffset != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance was null, expected non-null double.');
          final int? arg_totalAds = (args[5] as int?);
          assert(arg_totalAds != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance was null, expected non-null int.');
          final bool? arg_isBumper = (args[6] as bool?);
          assert(arg_isBumper != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance was null, expected non-null bool.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call(
                      arg_adPosition!,
                      arg_maxDuration!,
                      arg_podIndex!,
                      arg_timeOffset!,
                      arg_totalAds!,
                      arg_isBumper!) ??
                  AdPodInfo.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                    adPosition: arg_adPosition!,
                    maxDuration: arg_maxDuration!,
                    podIndex: arg_podIndex!,
                    timeOffset: arg_timeOffset!,
                    totalAds: arg_totalAds!,
                    isBumper: arg_isBumper!,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  AdPodInfo pigeon_copy() {
    return AdPodInfo.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      adPosition: adPosition,
      maxDuration: maxDuration,
      podIndex: podIndex,
      timeOffset: timeOffset,
      totalAds: totalAds,
      isBumper: isBumper,
    );
  }
}

/// FrameLayout is designed to block out an area on the screen to display a
/// single item.
///
/// See https://developer.android.com/reference/android/widget/FrameLayout.
class FrameLayout extends ViewGroup {
  FrameLayout({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  }) : super.pigeon_detached() {
    final int __pigeon_instanceIdentifier =
        pigeon_instanceManager.addDartCreatedInstance(this);
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecFrameLayout;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    () async {
      const String __pigeon_channelName =
          'dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_defaultConstructor';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: __pigeon_binaryMessenger,
      );
      final List<Object?>? __pigeon_replyList = await __pigeon_channel
          .send(<Object?>[__pigeon_instanceIdentifier]) as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: __pigeon_replyList[0]! as String,
          message: __pigeon_replyList[1] as String?,
          details: __pigeon_replyList[2],
        );
      } else {
        return;
      }
    }();
  }

  /// Constructs [FrameLayout] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  FrameLayout.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  }) : super.pigeon_detached();

  late final _PigeonProxyApiBaseCodec __pigeon_codecFrameLayout =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    FrameLayout Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  FrameLayout.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  FrameLayout pigeon_copy() {
    return FrameLayout.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// A special view that can contain other views (called children.)
///
/// See https://developer.android.com/reference/android/view/ViewGroup.
class ViewGroup extends View {
  /// Constructs [ViewGroup] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  ViewGroup.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  }) : super.pigeon_detached();

  late final _PigeonProxyApiBaseCodec __pigeon_codecViewGroup =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    ViewGroup Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.ViewGroup.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.ViewGroup.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.ViewGroup.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  ViewGroup.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  Future<void> addView(View view) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec = __pigeon_codecViewGroup;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.ViewGroup.addView';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this, view]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  ViewGroup pigeon_copy() {
    return ViewGroup.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// Displays a video file.
///
/// See https://developer.android.com/reference/android/widget/VideoView.
class VideoView extends View {
  VideoView({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    this.onPrepared,
    this.onCompletion,
    required this.onError,
  }) : super.pigeon_detached() {
    final int __pigeon_instanceIdentifier =
        pigeon_instanceManager.addDartCreatedInstance(this);
    final _PigeonProxyApiBaseCodec pigeonChannelCodec = __pigeon_codecVideoView;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    () async {
      const String __pigeon_channelName =
          'dev.flutter.pigeon.interactive_media_ads.VideoView.pigeon_defaultConstructor';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: __pigeon_binaryMessenger,
      );
      final List<Object?>? __pigeon_replyList = await __pigeon_channel
          .send(<Object?>[__pigeon_instanceIdentifier]) as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: __pigeon_replyList[0]! as String,
          message: __pigeon_replyList[1] as String?,
          details: __pigeon_replyList[2],
        );
      } else {
        return;
      }
    }();
  }

  /// Constructs [VideoView] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  VideoView.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    this.onPrepared,
    this.onCompletion,
    required this.onError,
  }) : super.pigeon_detached();

  late final _PigeonProxyApiBaseCodec __pigeon_codecVideoView =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  /// Callback to be invoked when the media source is ready for playback.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final VideoView instance = VideoView(
  ///  onPrepared: (VideoView pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    VideoView pigeon_instance,
    MediaPlayer player,
  )? onPrepared;

  /// Callback to be invoked when playback of a media source has completed.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final VideoView instance = VideoView(
  ///  onCompletion: (VideoView pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    VideoView pigeon_instance,
    MediaPlayer player,
  )? onCompletion;

  /// Callback to be invoked when there has been an error during an asynchronous
  /// operation.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final VideoView instance = VideoView(
  ///  onError: (VideoView pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    VideoView pigeon_instance,
    MediaPlayer player,
    int what,
    int extra,
  ) onError;

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    void Function(
      VideoView pigeon_instance,
      MediaPlayer player,
    )? onPrepared,
    void Function(
      VideoView pigeon_instance,
      MediaPlayer player,
    )? onCompletion,
    void Function(
      VideoView pigeon_instance,
      MediaPlayer player,
      int what,
      int extra,
    )? onError,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
              'dev.flutter.pigeon.interactive_media_ads.VideoView.onPrepared',
              pigeonChannelCodec,
              binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoView.onPrepared was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final VideoView? arg_pigeon_instance = (args[0] as VideoView?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoView.onPrepared was null, expected non-null VideoView.');
          final MediaPlayer? arg_player = (args[1] as MediaPlayer?);
          assert(arg_player != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoView.onPrepared was null, expected non-null MediaPlayer.');
          try {
            (onPrepared ?? arg_pigeon_instance!.onPrepared)
                ?.call(arg_pigeon_instance!, arg_player!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }

    {
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
              'dev.flutter.pigeon.interactive_media_ads.VideoView.onCompletion',
              pigeonChannelCodec,
              binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoView.onCompletion was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final VideoView? arg_pigeon_instance = (args[0] as VideoView?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoView.onCompletion was null, expected non-null VideoView.');
          final MediaPlayer? arg_player = (args[1] as MediaPlayer?);
          assert(arg_player != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoView.onCompletion was null, expected non-null MediaPlayer.');
          try {
            (onCompletion ?? arg_pigeon_instance!.onCompletion)
                ?.call(arg_pigeon_instance!, arg_player!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }

    {
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
              'dev.flutter.pigeon.interactive_media_ads.VideoView.onError',
              pigeonChannelCodec,
              binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoView.onError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final VideoView? arg_pigeon_instance = (args[0] as VideoView?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoView.onError was null, expected non-null VideoView.');
          final MediaPlayer? arg_player = (args[1] as MediaPlayer?);
          assert(arg_player != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoView.onError was null, expected non-null MediaPlayer.');
          final int? arg_what = (args[2] as int?);
          assert(arg_what != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoView.onError was null, expected non-null int.');
          final int? arg_extra = (args[3] as int?);
          assert(arg_extra != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoView.onError was null, expected non-null int.');
          try {
            (onError ?? arg_pigeon_instance!.onError)
                .call(arg_pigeon_instance!, arg_player!, arg_what!, arg_extra!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  /// Sets the URI of the video.
  Future<void> setVideoUri(String uri) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec = __pigeon_codecVideoView;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoView.setVideoUri';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this, uri]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// The current position of the playing video.
  ///
  /// In milliseconds.
  Future<int> getCurrentPosition() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec = __pigeon_codecVideoView;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoView.getCurrentPosition';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  @override
  VideoView pigeon_copy() {
    return VideoView.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      onPrepared: onPrepared,
      onCompletion: onCompletion,
      onError: onError,
    );
  }
}

/// This class represents the basic building block for user interface components.
///
/// See https://developer.android.com/reference/android/view/View.
class View extends PigeonProxyApiBaseClass {
  /// Constructs [View] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  View.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    View Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.View.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.View.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.View.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  View.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  View pigeon_copy() {
    return View.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// MediaPlayer class can be used to control playback of audio/video files and
/// streams.
///
/// See https://developer.android.com/reference/android/media/MediaPlayer.
class MediaPlayer extends PigeonProxyApiBaseClass {
  /// Constructs [MediaPlayer] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  MediaPlayer.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  late final _PigeonProxyApiBaseCodec __pigeon_codecMediaPlayer =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    MediaPlayer Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.MediaPlayer.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.MediaPlayer.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.MediaPlayer.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  MediaPlayer.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  /// Gets the duration of the file.
  Future<int> getDuration() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecMediaPlayer;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.MediaPlayer.getDuration';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  /// Seeks to specified time position.
  Future<void> seekTo(int mSec) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecMediaPlayer;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.MediaPlayer.seekTo';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this, mSec]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Starts or resumes playback.
  Future<void> start() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecMediaPlayer;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.MediaPlayer.start';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Pauses playback.
  Future<void> pause() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecMediaPlayer;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.MediaPlayer.pause';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Stops playback after playback has been started or paused.
  Future<void> stop() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecMediaPlayer;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.MediaPlayer.stop';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  MediaPlayer pigeon_copy() {
    return MediaPlayer.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// Callbacks that the player must fire.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoAdPlayer.VideoAdPlayerCallback.html
class VideoAdPlayerCallback extends PigeonProxyApiBaseClass {
  /// Constructs [VideoAdPlayerCallback] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  VideoAdPlayerCallback.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
  });

  late final _PigeonProxyApiBaseCodec __pigeon_codecVideoAdPlayerCallback =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    VideoAdPlayerCallback Function()? pigeon_newInstance,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.pigeon_newInstance',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.pigeon_newInstance was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_pigeon_instanceIdentifier = (args[0] as int?);
          assert(arg_pigeon_instanceIdentifier != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.pigeon_newInstance was null, expected non-null int.');
          try {
            (pigeon_instanceManager ?? PigeonInstanceManager.instance)
                .addHostCreatedInstance(
              pigeon_newInstance?.call() ??
                  VideoAdPlayerCallback.pigeon_detached(
                    pigeon_binaryMessenger: pigeon_binaryMessenger,
                    pigeon_instanceManager: pigeon_instanceManager,
                  ),
              arg_pigeon_instanceIdentifier!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  /// Fire this callback periodically as ad playback occurs.
  Future<void> onAdProgress(
    AdMediaInfo adMediaInfo,
    VideoProgressUpdate videoProgressUpdate,
  ) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayerCallback;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onAdProgress';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
            .send(<Object?>[this, adMediaInfo, videoProgressUpdate])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Fire this callback when video playback stalls waiting for data.
  Future<void> onBuffering(AdMediaInfo adMediaInfo) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayerCallback;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onBuffering';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, adMediaInfo]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Fire this callback when all content has finished playing.
  Future<void> onContentComplete() async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayerCallback;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onContentComplete';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Fire this callback when the video finishes playing.
  Future<void> onEnded(AdMediaInfo adMediaInfo) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayerCallback;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onEnded';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, adMediaInfo]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Fire this callback when the video has encountered an error.
  Future<void> onError(AdMediaInfo adMediaInfo) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayerCallback;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onError';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, adMediaInfo]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Fire this callback when the video is ready to begin playback.
  Future<void> onLoaded(AdMediaInfo adMediaInfo) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayerCallback;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onLoaded';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, adMediaInfo]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Fire this callback when the video is paused.
  Future<void> onPause(AdMediaInfo adMediaInfo) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayerCallback;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onPause';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, adMediaInfo]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Fire this callback when the player begins playing a video.
  Future<void> onPlay(AdMediaInfo adMediaInfo) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayerCallback;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onPlay';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, adMediaInfo]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Fire this callback when the video is unpaused.
  Future<void> onResume(AdMediaInfo adMediaInfo) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayerCallback;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onResume';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, adMediaInfo]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Fire this callback when the playback volume changes.
  Future<void> onVolumeChanged(
    AdMediaInfo adMediaInfo,
    int percentage,
  ) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayerCallback;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onVolumeChanged';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, adMediaInfo, percentage]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  VideoAdPlayerCallback pigeon_copy() {
    return VideoAdPlayerCallback.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
    );
  }
}

/// Defines the set of methods that a video player must implement to be used by
/// the IMA SDK, as well as a set of callbacks that it must fire.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoAdPlayer.html.
class VideoAdPlayer extends PigeonProxyApiBaseClass {
  VideoAdPlayer({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.addCallback,
    required this.loadAd,
    required this.pauseAd,
    required this.playAd,
    required this.release,
    required this.removeCallback,
    required this.stopAd,
  }) {
    final int __pigeon_instanceIdentifier =
        pigeon_instanceManager.addDartCreatedInstance(this);
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayer;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    () async {
      const String __pigeon_channelName =
          'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pigeon_defaultConstructor';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: __pigeon_binaryMessenger,
      );
      final List<Object?>? __pigeon_replyList = await __pigeon_channel
          .send(<Object?>[__pigeon_instanceIdentifier]) as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: __pigeon_replyList[0]! as String,
          message: __pigeon_replyList[1] as String?,
          details: __pigeon_replyList[2],
        );
      } else {
        return;
      }
    }();
  }

  /// Constructs [VideoAdPlayer] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  VideoAdPlayer.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.addCallback,
    required this.loadAd,
    required this.pauseAd,
    required this.playAd,
    required this.release,
    required this.removeCallback,
    required this.stopAd,
  });

  late final _PigeonProxyApiBaseCodec __pigeon_codecVideoAdPlayer =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  /// Adds a callback.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final VideoAdPlayer instance = VideoAdPlayer(
  ///  addCallback: (VideoAdPlayer pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    VideoAdPlayer pigeon_instance,
    VideoAdPlayerCallback callback,
  ) addCallback;

  /// Loads a video ad hosted at AdMediaInfo.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final VideoAdPlayer instance = VideoAdPlayer(
  ///  loadAd: (VideoAdPlayer pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    VideoAdPlayer pigeon_instance,
    AdMediaInfo adMediaInfo,
    AdPodInfo adPodInfo,
  ) loadAd;

  /// Pauses playing the current ad.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final VideoAdPlayer instance = VideoAdPlayer(
  ///  pauseAd: (VideoAdPlayer pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    VideoAdPlayer pigeon_instance,
    AdMediaInfo adMediaInfo,
  ) pauseAd;

  /// Starts or resumes playing the video ad referenced by the AdMediaInfo,
  /// provided loadAd has already been called for it.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final VideoAdPlayer instance = VideoAdPlayer(
  ///  playAd: (VideoAdPlayer pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    VideoAdPlayer pigeon_instance,
    AdMediaInfo adMediaInfo,
  ) playAd;

  /// Cleans up and releases all resources used by the `VideoAdPlayer`.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final VideoAdPlayer instance = VideoAdPlayer(
  ///  release: (VideoAdPlayer pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(VideoAdPlayer pigeon_instance) release;

  /// Removes a callback.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final VideoAdPlayer instance = VideoAdPlayer(
  ///  removeCallback: (VideoAdPlayer pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    VideoAdPlayer pigeon_instance,
    VideoAdPlayerCallback callback,
  ) removeCallback;

  /// Stops playing the current ad.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final VideoAdPlayer instance = VideoAdPlayer(
  ///  stopAd: (VideoAdPlayer pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    VideoAdPlayer pigeon_instance,
    AdMediaInfo adMediaInfo,
  ) stopAd;

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    void Function(
      VideoAdPlayer pigeon_instance,
      VideoAdPlayerCallback callback,
    )? addCallback,
    void Function(
      VideoAdPlayer pigeon_instance,
      AdMediaInfo adMediaInfo,
      AdPodInfo adPodInfo,
    )? loadAd,
    void Function(
      VideoAdPlayer pigeon_instance,
      AdMediaInfo adMediaInfo,
    )? pauseAd,
    void Function(
      VideoAdPlayer pigeon_instance,
      AdMediaInfo adMediaInfo,
    )? playAd,
    void Function(VideoAdPlayer pigeon_instance)? release,
    void Function(
      VideoAdPlayer pigeon_instance,
      VideoAdPlayerCallback callback,
    )? removeCallback,
    void Function(
      VideoAdPlayer pigeon_instance,
      AdMediaInfo adMediaInfo,
    )? stopAd,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.addCallback',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.addCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final VideoAdPlayer? arg_pigeon_instance =
              (args[0] as VideoAdPlayer?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.addCallback was null, expected non-null VideoAdPlayer.');
          final VideoAdPlayerCallback? arg_callback =
              (args[1] as VideoAdPlayerCallback?);
          assert(arg_callback != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.addCallback was null, expected non-null VideoAdPlayerCallback.');
          try {
            (addCallback ?? arg_pigeon_instance!.addCallback)
                .call(arg_pigeon_instance!, arg_callback!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }

    {
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
              'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.loadAd',
              pigeonChannelCodec,
              binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.loadAd was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final VideoAdPlayer? arg_pigeon_instance =
              (args[0] as VideoAdPlayer?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.loadAd was null, expected non-null VideoAdPlayer.');
          final AdMediaInfo? arg_adMediaInfo = (args[1] as AdMediaInfo?);
          assert(arg_adMediaInfo != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.loadAd was null, expected non-null AdMediaInfo.');
          final AdPodInfo? arg_adPodInfo = (args[2] as AdPodInfo?);
          assert(arg_adPodInfo != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.loadAd was null, expected non-null AdPodInfo.');
          try {
            (loadAd ?? arg_pigeon_instance!.loadAd)
                .call(arg_pigeon_instance!, arg_adMediaInfo!, arg_adPodInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }

    {
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
              'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pauseAd',
              pigeonChannelCodec,
              binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pauseAd was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final VideoAdPlayer? arg_pigeon_instance =
              (args[0] as VideoAdPlayer?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pauseAd was null, expected non-null VideoAdPlayer.');
          final AdMediaInfo? arg_adMediaInfo = (args[1] as AdMediaInfo?);
          assert(arg_adMediaInfo != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pauseAd was null, expected non-null AdMediaInfo.');
          try {
            (pauseAd ?? arg_pigeon_instance!.pauseAd)
                .call(arg_pigeon_instance!, arg_adMediaInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }

    {
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
              'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.playAd',
              pigeonChannelCodec,
              binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.playAd was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final VideoAdPlayer? arg_pigeon_instance =
              (args[0] as VideoAdPlayer?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.playAd was null, expected non-null VideoAdPlayer.');
          final AdMediaInfo? arg_adMediaInfo = (args[1] as AdMediaInfo?);
          assert(arg_adMediaInfo != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.playAd was null, expected non-null AdMediaInfo.');
          try {
            (playAd ?? arg_pigeon_instance!.playAd)
                .call(arg_pigeon_instance!, arg_adMediaInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }

    {
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
              'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.release',
              pigeonChannelCodec,
              binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.release was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final VideoAdPlayer? arg_pigeon_instance =
              (args[0] as VideoAdPlayer?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.release was null, expected non-null VideoAdPlayer.');
          try {
            (release ?? arg_pigeon_instance!.release)
                .call(arg_pigeon_instance!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }

    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.removeCallback',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.removeCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final VideoAdPlayer? arg_pigeon_instance =
              (args[0] as VideoAdPlayer?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.removeCallback was null, expected non-null VideoAdPlayer.');
          final VideoAdPlayerCallback? arg_callback =
              (args[1] as VideoAdPlayerCallback?);
          assert(arg_callback != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.removeCallback was null, expected non-null VideoAdPlayerCallback.');
          try {
            (removeCallback ?? arg_pigeon_instance!.removeCallback)
                .call(arg_pigeon_instance!, arg_callback!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }

    {
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
              'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.stopAd',
              pigeonChannelCodec,
              binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.stopAd was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final VideoAdPlayer? arg_pigeon_instance =
              (args[0] as VideoAdPlayer?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.stopAd was null, expected non-null VideoAdPlayer.');
          final AdMediaInfo? arg_adMediaInfo = (args[1] as AdMediaInfo?);
          assert(arg_adMediaInfo != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.stopAd was null, expected non-null AdMediaInfo.');
          try {
            (stopAd ?? arg_pigeon_instance!.stopAd)
                .call(arg_pigeon_instance!, arg_adMediaInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  /// The volume of the player as a percentage from 0 to 100.
  Future<void> setVolume(int value) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayer;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.setVolume';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[this, value]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// The `VideoProgressUpdate` describing playback progress of the current
  /// video.
  Future<void> setAdProgress(VideoProgressUpdate progress) async {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecVideoAdPlayer;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    const String __pigeon_channelName =
        'dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.setAdProgress';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[this, progress]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  VideoAdPlayer pigeon_copy() {
    return VideoAdPlayer.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      addCallback: addCallback,
      loadAd: loadAd,
      pauseAd: pauseAd,
      playAd: playAd,
      release: release,
      removeCallback: removeCallback,
      stopAd: stopAd,
    );
  }
}

/// Listener interface for notification of ad load or stream load completion.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsLoader.AdsLoadedListener.html.
class AdsLoadedListener extends PigeonProxyApiBaseClass {
  AdsLoadedListener({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.onAdsManagerLoaded,
  }) {
    final int __pigeon_instanceIdentifier =
        pigeon_instanceManager.addDartCreatedInstance(this);
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecAdsLoadedListener;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    () async {
      const String __pigeon_channelName =
          'dev.flutter.pigeon.interactive_media_ads.AdsLoadedListener.pigeon_defaultConstructor';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: __pigeon_binaryMessenger,
      );
      final List<Object?>? __pigeon_replyList = await __pigeon_channel
          .send(<Object?>[__pigeon_instanceIdentifier]) as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: __pigeon_replyList[0]! as String,
          message: __pigeon_replyList[1] as String?,
          details: __pigeon_replyList[2],
        );
      } else {
        return;
      }
    }();
  }

  /// Constructs [AdsLoadedListener] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdsLoadedListener.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.onAdsManagerLoaded,
  });

  late final _PigeonProxyApiBaseCodec __pigeon_codecAdsLoadedListener =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  /// Called once the AdsManager or StreamManager has been loaded.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final AdsLoadedListener instance = AdsLoadedListener(
  ///  onAdsManagerLoaded: (AdsLoadedListener pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    AdsLoadedListener pigeon_instance,
    AdsManagerLoadedEvent event,
  ) onAdsManagerLoaded;

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    void Function(
      AdsLoadedListener pigeon_instance,
      AdsManagerLoadedEvent event,
    )? onAdsManagerLoaded,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdsLoadedListener.onAdsManagerLoaded',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsLoadedListener.onAdsManagerLoaded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AdsLoadedListener? arg_pigeon_instance =
              (args[0] as AdsLoadedListener?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsLoadedListener.onAdsManagerLoaded was null, expected non-null AdsLoadedListener.');
          final AdsManagerLoadedEvent? arg_event =
              (args[1] as AdsManagerLoadedEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdsLoadedListener.onAdsManagerLoaded was null, expected non-null AdsManagerLoadedEvent.');
          try {
            (onAdsManagerLoaded ?? arg_pigeon_instance!.onAdsManagerLoaded)
                .call(arg_pigeon_instance!, arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  AdsLoadedListener pigeon_copy() {
    return AdsLoadedListener.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      onAdsManagerLoaded: onAdsManagerLoaded,
    );
  }
}

/// Interface for classes that will listen to AdErrorEvents.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdErrorEvent.AdErrorListener.html.
class AdErrorListener extends PigeonProxyApiBaseClass {
  AdErrorListener({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.onAdError,
  }) {
    final int __pigeon_instanceIdentifier =
        pigeon_instanceManager.addDartCreatedInstance(this);
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecAdErrorListener;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    () async {
      const String __pigeon_channelName =
          'dev.flutter.pigeon.interactive_media_ads.AdErrorListener.pigeon_defaultConstructor';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: __pigeon_binaryMessenger,
      );
      final List<Object?>? __pigeon_replyList = await __pigeon_channel
          .send(<Object?>[__pigeon_instanceIdentifier]) as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: __pigeon_replyList[0]! as String,
          message: __pigeon_replyList[1] as String?,
          details: __pigeon_replyList[2],
        );
      } else {
        return;
      }
    }();
  }

  /// Constructs [AdErrorListener] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdErrorListener.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.onAdError,
  });

  late final _PigeonProxyApiBaseCodec __pigeon_codecAdErrorListener =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  /// Called when an error occurs.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final AdErrorListener instance = AdErrorListener(
  ///  onAdError: (AdErrorListener pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    AdErrorListener pigeon_instance,
    AdErrorEvent event,
  ) onAdError;

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    void Function(
      AdErrorListener pigeon_instance,
      AdErrorEvent event,
    )? onAdError,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdErrorListener.onAdError',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdErrorListener.onAdError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AdErrorListener? arg_pigeon_instance =
              (args[0] as AdErrorListener?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdErrorListener.onAdError was null, expected non-null AdErrorListener.');
          final AdErrorEvent? arg_event = (args[1] as AdErrorEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdErrorListener.onAdError was null, expected non-null AdErrorEvent.');
          try {
            (onAdError ?? arg_pigeon_instance!.onAdError)
                .call(arg_pigeon_instance!, arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  AdErrorListener pigeon_copy() {
    return AdErrorListener.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      onAdError: onAdError,
    );
  }
}

/// Listener interface for ad events.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.AdEventListener.html.
class AdEventListener extends PigeonProxyApiBaseClass {
  AdEventListener({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.onAdEvent,
  }) {
    final int __pigeon_instanceIdentifier =
        pigeon_instanceManager.addDartCreatedInstance(this);
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        __pigeon_codecAdEventListener;
    final BinaryMessenger? __pigeon_binaryMessenger = pigeon_binaryMessenger;
    () async {
      const String __pigeon_channelName =
          'dev.flutter.pigeon.interactive_media_ads.AdEventListener.pigeon_defaultConstructor';
      final BasicMessageChannel<Object?> __pigeon_channel =
          BasicMessageChannel<Object?>(
        __pigeon_channelName,
        pigeonChannelCodec,
        binaryMessenger: __pigeon_binaryMessenger,
      );
      final List<Object?>? __pigeon_replyList = await __pigeon_channel
          .send(<Object?>[__pigeon_instanceIdentifier]) as List<Object?>?;
      if (__pigeon_replyList == null) {
        throw _createConnectionError(__pigeon_channelName);
      } else if (__pigeon_replyList.length > 1) {
        throw PlatformException(
          code: __pigeon_replyList[0]! as String,
          message: __pigeon_replyList[1] as String?,
          details: __pigeon_replyList[2],
        );
      } else {
        return;
      }
    }();
  }

  /// Constructs [AdEventListener] without creating the associated native object.
  ///
  /// This should only be used by subclasses created by this library or to
  /// create copies for an [PigeonInstanceManager].
  @protected
  AdEventListener.pigeon_detached({
    super.pigeon_binaryMessenger,
    super.pigeon_instanceManager,
    required this.onAdEvent,
  });

  late final _PigeonProxyApiBaseCodec __pigeon_codecAdEventListener =
      _PigeonProxyApiBaseCodec(pigeon_instanceManager);

  /// Respond to an occurrence of an AdEvent.
  ///
  /// For the associated Native object to be automatically garbage collected,
  /// it is required that the implementation of this `Function` doesn't have a
  /// strong reference to the encapsulating class instance. When this `Function`
  /// references a non-local variable, it is strongly recommended to access it
  /// with a `WeakReference`:
  ///
  /// ```dart
  /// final WeakReference weakMyVariable = WeakReference(myVariable);
  /// final AdEventListener instance = AdEventListener(
  ///  onAdEvent: (AdEventListener pigeon_instance, ...) {
  ///    print(weakMyVariable?.target);
  ///  },
  /// );
  /// ```
  ///
  /// Alternatively, [PigeonInstanceManager.removeWeakReference] can be used to
  /// release the associated Native object manually.
  final void Function(
    AdEventListener pigeon_instance,
    AdEvent event,
  ) onAdEvent;

  static void pigeon_setUpMessageHandlers({
    bool pigeon_clearHandlers = false,
    BinaryMessenger? pigeon_binaryMessenger,
    PigeonInstanceManager? pigeon_instanceManager,
    void Function(
      AdEventListener pigeon_instance,
      AdEvent event,
    )? onAdEvent,
  }) {
    final _PigeonProxyApiBaseCodec pigeonChannelCodec =
        _PigeonProxyApiBaseCodec(
            pigeon_instanceManager ?? PigeonInstanceManager.instance);
    final BinaryMessenger? binaryMessenger = pigeon_binaryMessenger;
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.interactive_media_ads.AdEventListener.onAdEvent',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (pigeon_clearHandlers) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdEventListener.onAdEvent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AdEventListener? arg_pigeon_instance =
              (args[0] as AdEventListener?);
          assert(arg_pigeon_instance != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdEventListener.onAdEvent was null, expected non-null AdEventListener.');
          final AdEvent? arg_event = (args[1] as AdEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.interactive_media_ads.AdEventListener.onAdEvent was null, expected non-null AdEvent.');
          try {
            (onAdEvent ?? arg_pigeon_instance!.onAdEvent)
                .call(arg_pigeon_instance!, arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }

  @override
  AdEventListener pigeon_copy() {
    return AdEventListener.pigeon_detached(
      pigeon_binaryMessenger: pigeon_binaryMessenger,
      pigeon_instanceManager: pigeon_instanceManager,
      onAdEvent: onAdEvent,
    );
  }
}
